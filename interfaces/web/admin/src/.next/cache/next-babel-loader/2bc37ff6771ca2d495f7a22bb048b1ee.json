{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Col } from \"shards-react\";\nimport SidebarMainNavbar from \"./SidebarMainNavbar\";\nimport SidebarNavItems from \"./SidebarNavItems\";\nimport { Store } from \"../../../flux\";\n\nvar MainSidebar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MainSidebar, _React$Component);\n\n  function MainSidebar(props) {\n    var _this;\n\n    _classCallCheck(this, MainSidebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainSidebar).call(this, props));\n    console.log('Store', Store);\n    _this.state = {\n      menuVisible: false,\n      sidebarNavItems: Store.getSidebarItems()\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MainSidebar, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      Store.addChangeListener(this.onChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Store.removeChangeListener(this.onChange);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange() {\n      this.setState(_objectSpread({}, this.state, {\n        menuVisible: Store.getMenuState(),\n        sidebarNavItems: Store.getSidebarItems()\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = classNames(\"main-sidebar\", \"px-0\", \"col-12\", this.state.menuVisible && \"open\");\n      return React.createElement(Col, {\n        tag: \"aside\",\n        className: classes,\n        lg: {\n          size: 2\n        },\n        md: {\n          size: 3\n        }\n      }, React.createElement(SidebarMainNavbar, {\n        hideLogoText: this.props.hideLogoText\n      }), React.createElement(SidebarNavItems, null));\n    }\n  }]);\n\n  return MainSidebar;\n}(React.Component);\n\nMainSidebar.propTypes = {\n  /**\n   * Whether to hide the logo text, or not.\n   */\n  hideLogoText: PropTypes.bool\n};\nMainSidebar.defaultProps = {\n  hideLogoText: false\n};\nexport default MainSidebar;","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/admin/src/components/layout/MainSidebar/MainSidebar.js"],"names":["React","PropTypes","classNames","Col","SidebarMainNavbar","SidebarNavItems","Store","MainSidebar","props","console","log","state","menuVisible","sidebarNavItems","getSidebarItems","onChange","bind","addChangeListener","removeChangeListener","setState","getMenuState","classes","size","hideLogoText","Component","propTypes","bool","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SAASC,KAAT,QAAsB,eAAtB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,qFAAMA,KAAN;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AACA,UAAKK,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KADF;AAEXC,MAAAA,eAAe,EAAEP,KAAK,CAACQ,eAAN;AAFN,KAAb;AAKA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB;AATiB;AAUlB;;;;yCAEoB;AACnBV,MAAAA,KAAK,CAACW,iBAAN,CAAwB,KAAKF,QAA7B;AACD;;;2CAEsB;AACrBT,MAAAA,KAAK,CAACY,oBAAN,CAA2B,KAAKH,QAAhC;AACD;;;+BAEU;AACT,WAAKI,QAAL,mBACK,KAAKR,KADV;AAEEC,QAAAA,WAAW,EAAEN,KAAK,CAACc,YAAN,EAFf;AAGEP,QAAAA,eAAe,EAAEP,KAAK,CAACQ,eAAN;AAHnB;AAKD;;;6BAEQ;AACP,UAAMO,OAAO,GAAGnB,UAAU,CACxB,cADwB,EAExB,MAFwB,EAGxB,QAHwB,EAIxB,KAAKS,KAAL,CAAWC,WAAX,IAA0B,MAJF,CAA1B;AAOA,aACE,oBAAC,GAAD;AACE,QAAA,GAAG,EAAC,OADN;AAEE,QAAA,SAAS,EAAES,OAFb;AAGE,QAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAHN;AAIE,QAAA,EAAE,EAAE;AAAEA,UAAAA,IAAI,EAAE;AAAR;AAJN,SAME,oBAAC,iBAAD;AAAmB,QAAA,YAAY,EAAE,KAAKd,KAAL,CAAWe;AAA5C,QANF,EAOE,oBAAC,eAAD,OAPF,CADF;AAWD;;;;EAhDuBvB,KAAK,CAACwB,S;;AAmDhCjB,WAAW,CAACkB,SAAZ,GAAwB;AACtB;;;AAGAF,EAAAA,YAAY,EAAEtB,SAAS,CAACyB;AAJF,CAAxB;AAOAnB,WAAW,CAACoB,YAAZ,GAA2B;AACzBJ,EAAAA,YAAY,EAAE;AADW,CAA3B;AAIA,eAAehB,WAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Col } from \"shards-react\";\n\nimport SidebarMainNavbar from \"./SidebarMainNavbar\";\nimport SidebarNavItems from \"./SidebarNavItems\";\n\nimport { Store } from \"../../../flux\";\n\nclass MainSidebar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    console.log('Store', Store)\n    this.state = {\n      menuVisible: false,\n      sidebarNavItems: Store.getSidebarItems()\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentWillMount() {\n    Store.addChangeListener(this.onChange);\n  }\n\n  componentWillUnmount() {\n    Store.removeChangeListener(this.onChange);\n  }\n\n  onChange() {\n    this.setState({\n      ...this.state,\n      menuVisible: Store.getMenuState(),\n      sidebarNavItems: Store.getSidebarItems()\n    });\n  }\n\n  render() {\n    const classes = classNames(\n      \"main-sidebar\",\n      \"px-0\",\n      \"col-12\",\n      this.state.menuVisible && \"open\"\n    );\n\n    return (\n      <Col\n        tag=\"aside\"\n        className={classes}\n        lg={{ size: 2 }}\n        md={{ size: 3 }}\n      >\n        <SidebarMainNavbar hideLogoText={this.props.hideLogoText} />\n        <SidebarNavItems />\n      </Col>\n    );\n  }\n}\n\nMainSidebar.propTypes = {\n  /**\n   * Whether to hide the logo text, or not.\n   */\n  hideLogoText: PropTypes.bool\n};\n\nMainSidebar.defaultProps = {\n  hideLogoText: false\n};\n\nexport default MainSidebar;\n"]},"metadata":{},"sourceType":"module"}