{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport App from \"next/app\";\nimport React from \"react\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport fetch from 'isomorphic-unfetch';\nimport sagas from \"../sagas\";\nimport allReducers from \"../reducers\";\nimport { verifyTokenRequest } from \"../actions/auth\";\nimport '../styles.css';\nimport Custom404 from './404';\nimport config from '../../config';\nvar sagaMiddleware = createSagaMiddleware();\nvar store;\n\nvar getUrlParameter = function getUrlParameter(name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\".concat(name, \"=([^&#]*)\"));\n  var results = regex.exec(window.location.search);\n  return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n};\n\nvar makeStore = function makeStore(initialState) {\n  store = createStore(allReducers, initialState, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(sagas);\n  return store;\n};\n\nvar Simpatico =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(Simpatico, _App);\n\n  function Simpatico() {\n    _classCallCheck(this, Simpatico);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Simpatico).apply(this, arguments));\n  }\n\n  _createClass(Simpatico, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Check if token passed in - validate it and use the response to populate local storage\n      if (window.location.search.includes(\"token\")) {\n        // Ask server to verify and set cookie\n        store.dispatch(verifyTokenRequest({\n          token: getUrlParameter(\"token\")\n        }));\n      }\n\n      if (!window.location.search.includes(\"token\")) {\n        // Not on the URL so check the localStorage\n        if (localStorage.getItem(\"token\")) {\n          // Ask server to verify and set cookie\n          store.dispatch(verifyTokenRequest({\n            token: localStorage.getItem(\"token\")\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          debate = _this$props.debate;\n      if (!debate.id) return React.createElement(Custom404, null);\n      return React.createElement(Provider, {\n        store: store\n      }, React.createElement(Component, debate));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: async function getInitialProps(_ref) {\n      var Component = _ref.Component,\n          ctx = _ref.ctx,\n          req = _ref.req;\n      var pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; // Do a check if this debatee exists before trying to render (no saga here, server side)\n\n      var res = await fetch(\"\".concat(config.api.host, \"/v1/fetchDebate?name=\").concat(ctx.req.headers.host));\n      var debate = await res.json();\n      console.log('debate', debate);\n      return {\n        pageProps: pageProps,\n        debate: debate\n      };\n    }\n  }]);\n\n  return Simpatico;\n}(App);\n\nexport default withRedux(makeStore)(Simpatico);","map":null,"metadata":{},"sourceType":"module"}