{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport Head from 'next/head';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport Overview from \"../components/Overview\";\nimport Theme from \"../components/Theme\";\nimport Main from \"../components/Main\";\nimport Sidebar from \"../components/Sidebar\";\nimport Footer from \"../components/Footer\";\nimport post1 from \"../data/blog-post1.md\";\nimport nextI18NextInstance from '../../i18n';\nimport config from '../../config';\nimport { fetchDebateRequest } from '../actions/debate';\n\nvar getCurrentLang = function getCurrentLang() {\n  return nextI18NextInstance.i18n.language || 'en';\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    mainGrid: {\n      marginTop: theme.spacing(3)\n    }\n  };\n});\nvar posts = [post1];\nvar sidebar = {\n  title: 'About',\n  description: 'Get involved',\n  social: [{\n    name: 'GitHub',\n    icon: GitHubIcon\n  }, {\n    name: 'Twitter',\n    icon: TwitterIcon\n  }, {\n    name: 'Facebook',\n    icon: FacebookIcon\n  }]\n};\nexport default function Home(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    // Fire once, get page and debate\n    dispatch(fetchDebateRequest(window.location.hostname));\n  }, []);\n  var debate = useSelector(function (state) {\n    return state.debate.debate;\n  });\n  var classes = useStyles();\n  console.log('debate', debate);\n  return React.createElement(\"div\", null, React.createElement(Head, null, React.createElement(\"title\", null, debate.slug), React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\"\n  })), debate ? React.createElement(React.Fragment, null, React.createElement(CssBaseline, null), React.createElement(Container, {\n    maxWidth: \"lg\"\n  }, React.createElement(Header, {\n    title: debate.slug,\n    header: debate.header\n  }), React.createElement(\"main\", null, React.createElement(Overview, {\n    data: debate.overview\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 4\n  }, debate.themes.map(function (theme) {\n    return React.createElement(Theme, {\n      key: theme.title[getCurrentLang()],\n      theme: theme\n    });\n  })), React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    className: classes.mainGrid\n  }, React.createElement(Main, {\n    title: \"Latest contributon\",\n    posts: posts\n  }), React.createElement(Sidebar, {\n    title: sidebar.title,\n    description: sidebar.description,\n    social: sidebar.social\n  })))), React.createElement(Footer, {\n    title: \"Footer\",\n    description: \"Something here to give the footer a purpose!\"\n  })) : null);\n}\n\nHome.getInitialProps = async function (ctx) {\n  if (ctx.req) {\n    // Do a check if this debatee exists before trying to render (no saga here, server side)\n    var res = await fetch(\"\".concat(config.api.host, \"/v1/fetchDebate?name=\").concat(ctx.req.headers.host));\n    var debate = await res.json();\n    return debate;\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/pages/index.jsx"],"names":["React","useEffect","Head","makeStyles","CssBaseline","Grid","Container","GitHubIcon","FacebookIcon","TwitterIcon","useDispatch","useSelector","Header","Overview","Theme","Main","Sidebar","Footer","post1","nextI18NextInstance","config","fetchDebateRequest","getCurrentLang","i18n","language","useStyles","theme","mainGrid","marginTop","spacing","posts","sidebar","title","description","social","name","icon","Home","props","dispatch","window","location","hostname","debate","state","classes","console","log","slug","header","overview","themes","map","getInitialProps","ctx","req","res","fetch","api","host","headers","json"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Head from 'next/head'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nimport Header from \"../components/Header\";\nimport Overview from \"../components/Overview\";\nimport Theme from \"../components/Theme\";\nimport Main from \"../components/Main\";\nimport Sidebar from \"../components/Sidebar\";\nimport Footer from \"../components/Footer\";\nimport post1 from \"../data/blog-post1.md\";\nimport nextI18NextInstance from '../../i18n';\nimport config from '../../config';\n\nimport { fetchDebateRequest } from '../actions/debate';\n\nconst getCurrentLang = () => nextI18NextInstance.i18n.language || 'en';\n\nconst useStyles = makeStyles(theme => ({\n  mainGrid: {\n    marginTop: theme.spacing(3)\n  },\n}));\n\nconst posts = [post1];\n\nconst sidebar = {\n  title: 'About',\n  description:\n    'Get involved',\n  social: [\n    { name: 'GitHub', icon: GitHubIcon },\n    { name: 'Twitter', icon: TwitterIcon },\n    { name: 'Facebook', icon: FacebookIcon },\n  ],\n};\n\nexport default function Home(props) {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => { // Fire once, get page and debate\n    dispatch(fetchDebateRequest(window.location.hostname));\n  }, []);\n\n  const debate = useSelector(state => state.debate.debate);\n\n  const classes = useStyles();\n\n  console.log('debate', debate)\n  return (\n    <div>\n      <Head>\n        <title>{debate.slug}</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      {debate ? (\n      <>\n        <CssBaseline />\n        <Container maxWidth=\"lg\">\n          <Header title={debate.slug} header={debate.header} />\n          <main>\n            <Overview data={debate.overview} />\n            <Grid container spacing={4}>\n              {debate.themes.map(theme => (\n                <Theme key={theme.title[getCurrentLang()]} theme={theme} />\n              ))}\n            </Grid>\n            <Grid container spacing={5} className={classes.mainGrid}>\n              <Main title=\"Latest contributon\" posts={posts} />\n              <Sidebar\n                title={sidebar.title}\n                description={sidebar.description}\n                social={sidebar.social}\n              />\n            </Grid>\n          </main>\n        </Container>\n        <Footer title=\"Footer\" description=\"Something here to give the footer a purpose!\" />\n      </>) : null }\n     </div>\n  );\n}\n\nHome.getInitialProps = async ctx => {\n  if (ctx.req) {\n    // Do a check if this debatee exists before trying to render (no saga here, server side)\n    const res = await fetch(`${config.api.host}/v1/fetchDebate?name=${ctx.req.headers.host}`)\n    const debate = await res.json()\n\n    return debate\n  }\n\n  return  null\n}"]},"metadata":{},"sourceType":"module"}