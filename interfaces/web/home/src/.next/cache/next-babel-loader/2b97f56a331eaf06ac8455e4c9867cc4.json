{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { CREATE_POST_REQUEST, createPostSuccess, createPostFailure, REPLY_POST_REQUEST, replyPostSuccess, replyPostFailure, FETCH_POSTS_FOR_THREAD_REQUEST, fetchPostsForThreadSuccess, fetchPostsForThreadFailure } from \"../actions/post\";\nimport { get, post } from \"../lib/api\";\n\nfunction* createPostRequest(action) {\n  var r = yield post(\"v1/createPost\", JSON.stringify({\n    title: action.title,\n    contents: action.contents,\n    thread: action.thread\n  })).then(function (json) {\n    return put(createPostSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(createPostFailure(err));\n  });\n  yield r;\n}\n\nfunction* replyPostRequest(action) {\n  var r = yield post(\"v1/replyPost\", JSON.stringify({\n    id: action.id,\n    contents: action.contents\n  })).then(function (json) {\n    return put(replyPostSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(replyPostFailure(err));\n  });\n  yield r;\n}\n\nfunction* fetchPostsForThread(action) {\n  var r = yield get(\"v1/fetchPostsForThread?thread=\".concat(action.thread)).then(function (json) {\n    return put(fetchPostsForThreadSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchPostsForThreadFailure(err));\n  });\n  yield r;\n}\n\nexport default function* postSaga() {\n  yield takeLatest(CREATE_POST_REQUEST, createPostRequest);\n  yield takeLatest(REPLY_POST_REQUEST, replyPostRequest);\n  yield takeLatest(FETCH_POSTS_FOR_THREAD_REQUEST, fetchPostsForThread);\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/sagas/post.js"],"names":["takeLatest","put","CREATE_POST_REQUEST","createPostSuccess","createPostFailure","REPLY_POST_REQUEST","replyPostSuccess","replyPostFailure","FETCH_POSTS_FOR_THREAD_REQUEST","fetchPostsForThreadSuccess","fetchPostsForThreadFailure","get","post","createPostRequest","action","r","JSON","stringify","title","contents","thread","then","json","err","replyPostRequest","id","fetchPostsForThread","postSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,kBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,8BAPF,EAQEC,0BARF,EASEC,0BATF,QAUO,iBAVP;AAWA,SAASC,GAAT,EAAcC,IAAd,QAA0B,YAA1B;;AAEA,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AAClC,MAAMC,CAAC,GAAG,MAAMH,IAAI,CAClB,eADkB,EAElBI,IAAI,CAACC,SAAL,CAAe;AACbC,IAAAA,KAAK,EAAEJ,MAAM,CAACI,KADD;AAEbC,IAAAA,QAAQ,EAAEL,MAAM,CAACK,QAFJ;AAGbC,IAAAA,MAAM,EAAEN,MAAM,CAACM;AAHF,GAAf,CAFkB,CAAJ,CAQbC,IARa,CAQR,UAAAC,IAAI;AAAA,WAAIrB,GAAG,CAACE,iBAAiB,CAACmB,IAAD,CAAlB,CAAP;AAAA,GARI,WASP,UAAAC,GAAG;AAAA,WAAItB,GAAG,CAACG,iBAAiB,CAACmB,GAAD,CAAlB,CAAP;AAAA,GATI,CAAhB;AAUA,QAAMR,CAAN;AACD;;AAED,UAAUS,gBAAV,CAA2BV,MAA3B,EAAmC;AACjC,MAAMC,CAAC,GAAG,MAAMH,IAAI,CAClB,cADkB,EAElBI,IAAI,CAACC,SAAL,CAAe;AACbQ,IAAAA,EAAE,EAAEX,MAAM,CAACW,EADE;AAEbN,IAAAA,QAAQ,EAAEL,MAAM,CAACK;AAFJ,GAAf,CAFkB,CAAJ,CAObE,IAPa,CAOR,UAAAC,IAAI;AAAA,WAAIrB,GAAG,CAACK,gBAAgB,CAACgB,IAAD,CAAjB,CAAP;AAAA,GAPI,WAQP,UAAAC,GAAG;AAAA,WAAItB,GAAG,CAACM,gBAAgB,CAACgB,GAAD,CAAjB,CAAP;AAAA,GARI,CAAhB;AASA,QAAMR,CAAN;AACD;;AAED,UAAUW,mBAAV,CAA8BZ,MAA9B,EAAsC;AACpC,MAAMC,CAAC,GAAG,MAAMJ,GAAG,yCAAkCG,MAAM,CAACM,MAAzC,EAAH,CACbC,IADa,CACR,UAAAC,IAAI;AAAA,WAAIrB,GAAG,CAACQ,0BAA0B,CAACa,IAAD,CAA3B,CAAP;AAAA,GADI,WAEP,UAAAC,GAAG;AAAA,WAAItB,GAAG,CAACS,0BAA0B,CAACa,GAAD,CAA3B,CAAP;AAAA,GAFI,CAAhB;AAGA,QAAMR,CAAN;AACD;;AAED,eAAe,UAAUY,QAAV,GAAqB;AAClC,QAAM3B,UAAU,CAACE,mBAAD,EAAsBW,iBAAtB,CAAhB;AACA,QAAMb,UAAU,CAACK,kBAAD,EAAqBmB,gBAArB,CAAhB;AACA,QAAMxB,UAAU,CAACQ,8BAAD,EAAiCkB,mBAAjC,CAAhB;AACD","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport {\n  CREATE_POST_REQUEST,\n  createPostSuccess,\n  createPostFailure,\n  REPLY_POST_REQUEST,\n  replyPostSuccess,\n  replyPostFailure,\n  FETCH_POSTS_FOR_THREAD_REQUEST,\n  fetchPostsForThreadSuccess,\n  fetchPostsForThreadFailure\n} from \"../actions/post\";\nimport { get, post } from \"../lib/api\";\n\nfunction* createPostRequest(action) {\n  const r = yield post(\n    \"v1/createPost\",\n    JSON.stringify({\n      title: action.title,\n      contents: action.contents,\n      thread: action.thread\n    })\n  )\n    .then(json => put(createPostSuccess(json)))\n    .catch(err => put(createPostFailure(err)));\n  yield r;\n}\n\nfunction* replyPostRequest(action) {\n  const r = yield post(\n    \"v1/replyPost\",\n    JSON.stringify({\n      id: action.id,\n      contents: action.contents\n    })\n  )\n    .then(json => put(replyPostSuccess(json)))\n    .catch(err => put(replyPostFailure(err)));\n  yield r;\n}\n\nfunction* fetchPostsForThread(action) {\n  const r = yield get(`v1/fetchPostsForThread?thread=${action.thread}`)\n    .then(json => put(fetchPostsForThreadSuccess(json)))\n    .catch(err => put(fetchPostsForThreadFailure(err)));\n  yield r;\n}\n\nexport default function* postSaga() {\n  yield takeLatest(CREATE_POST_REQUEST, createPostRequest);\n  yield takeLatest(REPLY_POST_REQUEST, replyPostRequest);\n  yield takeLatest(FETCH_POSTS_FOR_THREAD_REQUEST, fetchPostsForThread);\n}\n"]},"metadata":{},"sourceType":"module"}