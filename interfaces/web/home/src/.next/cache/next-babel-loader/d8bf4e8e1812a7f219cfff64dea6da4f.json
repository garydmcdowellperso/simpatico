{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport Head from 'next/head';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { HTMLRenderer } from \"@react-page/renderer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Footer from \"../components/Footer\";\nimport \"@react-page/core/lib/index.css\"; // we also want to load the stylesheets\n\nimport \"@react-page/core/lib/index.css\"; // we also want to load the stylesheets\n// Require editor ui stylesheet\n\nimport \"@react-page/ui/lib/index.css\"; // Load some exemplary plugins:\n\nimport slate from \"@react-page/plugins-slate\"; // The rich text area plugin\n\nimport \"@react-page/plugins-slate/lib/index.css\"; // Stylesheets for the rich text area plugin\n\nimport background from \"@react-page/plugins-background\"; // A plugin for background images\n\nimport \"@react-page/plugins-background/lib/index.css\"; // Stylesheets for  background layout plugin\n\nimport image from \"@react-page/plugins-image\"; // A plugin for background images\n\nimport \"@react-page/plugins-image/lib/index.css\"; // Stylesheets for  background layout plugin\n\nimport video from \"@react-page/plugins-video\"; // A plugin for background images\n\nimport \"@react-page/plugins-video/lib/index.css\"; // Stylesheets for  background layout plugin\n\nimport spacer from \"@react-page/plugins-spacer\"; // A plugin for background images\n\nimport \"@react-page/plugins-spacer/lib/index.css\"; // Stylesheets for  background layout plugin\n\nimport Header from \"../components/Header\";\nimport nextI18NextInstance from '../../i18n';\nimport config from '../../config';\n\nvar getCurrentLang = function getCurrentLang() {\n  return nextI18NextInstance.i18n.language || 'en';\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    mainGrid: {\n      marginTop: theme.spacing(3)\n    }\n  };\n});\nvar plugins = {\n  content: [slate(), image, spacer, video],\n  // Define plugins for content cells. To import multiple plugins, use [slate(), image, spacer, divider]\n  layout: [background({\n    defaultPlugin: slate()\n  })] // Define plugins for layout cells\n\n};\nexport default function CMSPage(_ref) {\n  var page = _ref.page,\n      debate = _ref.debate;\n  var classes = useStyles();\n  return React.createElement(\"div\", null, React.createElement(Head, null, React.createElement(\"title\", null, debate.slug), React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\"\n  })), React.createElement(React.Fragment, null, React.createElement(CssBaseline, null), React.createElement(Container, {\n    maxWidth: \"lg\"\n  }, React.createElement(Header, {\n    title: debate.slug,\n    header: debate.header\n  }), React.createElement(\"main\", null, React.createElement(HTMLRenderer, {\n    plugins: plugins,\n    state: page.languages[getCurrentLang()]\n  }))), React.createElement(Footer, {\n    title: \"Footer\",\n    description: \"Something here to give the footer a purpose!\"\n  })));\n}\n\nCMSPage.getServerSideProps = async function (ctx) {\n  // Fetch the page contents\n  var res = await fetch(\"\".concat(config.api.host, \"/v1/fetchPage?id=\").concat(ctx.query.page));\n  var page = await res.json(); // Do a check if this debatee exists before trying to render (no saga here, server side)\n\n  var res2 = await fetch(\"\".concat(config.api.host, \"/v1/fetchDebate?name=\").concat(ctx.req.headers.host));\n  var debate = await res2.json();\n  console.log('page', page);\n  return {\n    page: page,\n    debate: debate\n  };\n};","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/pages/cmspage.jsx"],"names":["React","useEffect","useState","Head","makeStyles","HTMLRenderer","CssBaseline","Container","Footer","slate","background","image","video","spacer","Header","nextI18NextInstance","config","getCurrentLang","i18n","language","useStyles","theme","mainGrid","marginTop","spacing","plugins","content","layout","defaultPlugin","CMSPage","page","debate","classes","slug","header","languages","getServerSideProps","ctx","res","fetch","api","host","query","json","res2","req","headers","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Head from 'next/head'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { HTMLRenderer } from \"@react-page/renderer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Footer from \"../components/Footer\";\n\nimport \"@react-page/core/lib/index.css\"; // we also want to load the stylesheets\n\nimport \"@react-page/core/lib/index.css\"; // we also want to load the stylesheets\n// Require editor ui stylesheet\nimport \"@react-page/ui/lib/index.css\";\n\n// Load some exemplary plugins:\nimport slate from \"@react-page/plugins-slate\"; // The rich text area plugin\nimport \"@react-page/plugins-slate/lib/index.css\"; // Stylesheets for the rich text area plugin\nimport background from \"@react-page/plugins-background\"; // A plugin for background images\nimport \"@react-page/plugins-background/lib/index.css\"; // Stylesheets for  background layout plugin\nimport image from \"@react-page/plugins-image\"; // A plugin for background images\nimport \"@react-page/plugins-image/lib/index.css\"; // Stylesheets for  background layout plugin\nimport video from \"@react-page/plugins-video\"; // A plugin for background images\nimport \"@react-page/plugins-video/lib/index.css\"; // Stylesheets for  background layout plugin\nimport spacer from \"@react-page/plugins-spacer\"; // A plugin for background images\nimport \"@react-page/plugins-spacer/lib/index.css\"; // Stylesheets for  background layout plugin\n\nimport Header from \"../components/Header\";\n\nimport nextI18NextInstance from '../../i18n';\n\nimport config from '../../config';\n\nconst getCurrentLang = () => nextI18NextInstance.i18n.language || 'en';\n\nconst useStyles = makeStyles(theme => ({\n  mainGrid: {\n    marginTop: theme.spacing(3)\n  },\n}));\n\n\nconst plugins = {\n  content: [slate(), image, spacer, video], // Define plugins for content cells. To import multiple plugins, use [slate(), image, spacer, divider]\n  layout: [background({ defaultPlugin: slate() })] // Define plugins for layout cells\n};\n\nexport default function CMSPage({ page, debate }) {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Head>\n        <title>{debate.slug}</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      <>\n        <CssBaseline />\n        <Container maxWidth=\"lg\">\n          <Header title={debate.slug} header={debate.header} />\n          <main>\n            <HTMLRenderer \n                plugins={plugins} \n                state={page.languages[getCurrentLang()]} \n            />\n          </main>\n        </Container>\n        <Footer title=\"Footer\" description=\"Something here to give the footer a purpose!\" />\n      </>\n    </div>\n  );\n}\n\nCMSPage.getServerSideProps = async ctx => {\n  // Fetch the page contents\n  const res = await fetch(`${config.api.host}/v1/fetchPage?id=${ctx.query.page}`)\n  const page = await res.json()\n  \n  // Do a check if this debatee exists before trying to render (no saga here, server side)\n  const res2 = await fetch(`${config.api.host}/v1/fetchDebate?name=${ctx.req.headers.host}`)\n  const debate = await res2.json()\n\n\n  console.log('page', page)\n  return { page, debate }\n}\n"]},"metadata":{},"sourceType":"module"}