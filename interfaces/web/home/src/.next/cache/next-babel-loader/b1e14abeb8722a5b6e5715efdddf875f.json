{"ast":null,"code":"export var CREATE_POST_REQUEST = \"CREATE_POST_REQUEST\";\nexport var CREATE_POST_SUCCESS = \"CREATE_POST_SUCCESS\";\nexport var CREATE_POST_FAILURE = \"CREATE_POST_FAILURE\";\nexport var REPLY_POST_REQUEST = \"REPLY_POST_REQUEST\";\nexport var REPLY_POST_SUCCESS = \"REPLY_POST_SUCCESS\";\nexport var REPLY_POST_FAILURE = \"REPLY_POST_FAILURE\";\nexport var FETCH_POSTS_FOR_THREAD_REQUEST = \"FETCH_POSTS_FOR_THREAD_REQUEST\";\nexport var FETCH_POSTS_FOR_THREAD_SUCCESS = \"FETCH_POSTS_FOR_THREAD_SUCCESS\";\nexport var FETCH_POSTS_FOR_THREAD_FAILURE = \"FETCH_POSTS_FOR_THREAD_FAILURE\";\nexport function createPostRequest(_ref) {\n  var title = _ref.title,\n      contents = _ref.contents,\n      thread = _ref.thread;\n  return {\n    type: CREATE_POST_REQUEST,\n    title: title,\n    contents: contents,\n    thread: thread\n  };\n}\nexport function createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    post: post\n  };\n}\nexport function createPostFailure(error) {\n  return {\n    type: CREATE_POST_FAILURE,\n    error: error\n  };\n}\nexport function replyPostRequest(_ref2) {\n  var id = _ref2.id,\n      contents = _ref2.contents;\n  return {\n    type: REPLY_POST_REQUEST,\n    id: id,\n    contents: contents\n  };\n}\nexport function replyPostSuccess(post) {\n  return {\n    type: REPLY_POST_SUCCESS,\n    post: post\n  };\n}\nexport function replyPostFailure(error) {\n  return {\n    type: REPLY_POST_FAILURE,\n    error: error\n  };\n}\nexport function fetchPostsForThread(thread) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_REQUEST,\n    thread: thread\n  };\n}\nexport function fetchPostsForThreadSuccess(posts) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_SUCCESS,\n    posts: posts\n  };\n}\nexport function fetchPostsForThreadFailure(error) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_FAILURE,\n    error: error\n  };\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/actions/post.js"],"names":["CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","REPLY_POST_REQUEST","REPLY_POST_SUCCESS","REPLY_POST_FAILURE","FETCH_POSTS_FOR_THREAD_REQUEST","FETCH_POSTS_FOR_THREAD_SUCCESS","FETCH_POSTS_FOR_THREAD_FAILURE","createPostRequest","title","contents","thread","type","createPostSuccess","post","createPostFailure","error","replyPostRequest","id","replyPostSuccess","replyPostFailure","fetchPostsForThread","fetchPostsForThreadSuccess","posts","fetchPostsForThreadFailure"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,IAAMC,8BAA8B,GAAG,gCAAvC;AACP,OAAO,IAAMC,8BAA8B,GAAG,gCAAvC;AACP,OAAO,IAAMC,8BAA8B,GAAG,gCAAvC;AAEP,OAAO,SAASC,iBAAT,OAAwD;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAC7D,SAAO;AACLC,IAAAA,IAAI,EAAEb,mBADD;AAELU,IAAAA,KAAK,EAALA,KAFK;AAGLC,IAAAA,QAAQ,EAARA,QAHK;AAILC,IAAAA,MAAM,EAANA;AAJK,GAAP;AAMD;AAED,OAAO,SAASE,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,SAAO;AACLF,IAAAA,IAAI,EAAEZ,mBADD;AAELc,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,SAAO;AACLJ,IAAAA,IAAI,EAAEX,mBADD;AAELe,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,gBAAT,QAA4C;AAAA,MAAhBC,EAAgB,SAAhBA,EAAgB;AAAA,MAAZR,QAAY,SAAZA,QAAY;AACjD,SAAO;AACLE,IAAAA,IAAI,EAAEV,kBADD;AAELgB,IAAAA,EAAE,EAAFA,EAFK;AAGLR,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD;AAED,OAAO,SAASS,gBAAT,CAA0BL,IAA1B,EAAgC;AACrC,SAAO;AACLF,IAAAA,IAAI,EAAET,kBADD;AAELW,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID;AAED,OAAO,SAASM,gBAAT,CAA0BJ,KAA1B,EAAiC;AACtC,SAAO;AACLJ,IAAAA,IAAI,EAAER,kBADD;AAELY,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASK,mBAAT,CAA6BV,MAA7B,EAAqC;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAEP,8BADD;AAELM,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID;AAED,OAAO,SAASW,0BAAT,CAAoCC,KAApC,EAA2C;AAChD,SAAO;AACLX,IAAAA,IAAI,EAAEN,8BADD;AAELiB,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,0BAAT,CAAoCR,KAApC,EAA2C;AAChD,SAAO;AACLJ,IAAAA,IAAI,EAAEL,8BADD;AAELS,IAAAA,KAAK,EAALA;AAFK,GAAP;AAID","sourcesContent":["export const CREATE_POST_REQUEST = \"CREATE_POST_REQUEST\";\nexport const CREATE_POST_SUCCESS = \"CREATE_POST_SUCCESS\";\nexport const CREATE_POST_FAILURE = \"CREATE_POST_FAILURE\";\n\nexport const REPLY_POST_REQUEST = \"REPLY_POST_REQUEST\";\nexport const REPLY_POST_SUCCESS = \"REPLY_POST_SUCCESS\";\nexport const REPLY_POST_FAILURE = \"REPLY_POST_FAILURE\";\n\nexport const FETCH_POSTS_FOR_THREAD_REQUEST = \"FETCH_POSTS_FOR_THREAD_REQUEST\";\nexport const FETCH_POSTS_FOR_THREAD_SUCCESS = \"FETCH_POSTS_FOR_THREAD_SUCCESS\";\nexport const FETCH_POSTS_FOR_THREAD_FAILURE = \"FETCH_POSTS_FOR_THREAD_FAILURE\";\n\nexport function createPostRequest({ title, contents, thread }) {\n  return {\n    type: CREATE_POST_REQUEST,\n    title,\n    contents,\n    thread\n  };\n}\n\nexport function createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    post\n  };\n}\n\nexport function createPostFailure(error) {\n  return {\n    type: CREATE_POST_FAILURE,\n    error\n  };\n}\n\nexport function replyPostRequest({ id, contents }) {\n  return {\n    type: REPLY_POST_REQUEST,\n    id,\n    contents\n  };\n}\n\nexport function replyPostSuccess(post) {\n  return {\n    type: REPLY_POST_SUCCESS,\n    post\n  };\n}\n\nexport function replyPostFailure(error) {\n  return {\n    type: REPLY_POST_FAILURE,\n    error\n  };\n}\n\nexport function fetchPostsForThread(thread) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_REQUEST,\n    thread\n  };\n}\n\nexport function fetchPostsForThreadSuccess(posts) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_SUCCESS,\n    posts\n  };\n}\n\nexport function fetchPostsForThreadFailure(error) {\n  return {\n    type: FETCH_POSTS_FOR_THREAD_FAILURE,\n    error\n  };\n}\n"]},"metadata":{},"sourceType":"module"}