{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_ALLPAGES_REQUEST, FETCH_ALLPAGES_SUCCESS, FETCH_ALLPAGES_FAILURE, CREATE_PAGE_REQUEST, CREATE_PAGE_SUCCESS, CREATE_PAGE_FAILURE, FETCH_PAGE_REQUEST, FETCH_PAGE_SUCCESS, FETCH_PAGE_FAILURE, UPDATE_PAGE_REQUEST, UPDATE_PAGE_SUCCESS, UPDATE_PAGE_FAILURE } from \"../actions/pages\";\nvar initialState = {\n  pages: [],\n  processing: false,\n  error: \"\",\n  page: null,\n  processing_update: false\n};\nexport default function pages() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_ALLPAGES_REQUEST:\n      return _objectSpread({}, state, {\n        processing: true,\n        error: \"\"\n      });\n\n    case FETCH_ALLPAGES_SUCCESS:\n      // Parse out json and update the store\n      return _objectSpread({}, state, {\n        processing: false,\n        error: \"\",\n        pages: action.pages\n      });\n\n    case FETCH_ALLPAGES_FAILURE:\n      return _objectSpread({}, state, {\n        processing: false,\n        error: action.error,\n        pages: []\n      });\n\n    case CREATE_PAGE_REQUEST:\n      return _objectSpread({}, state, {\n        processing: true,\n        error: \"\"\n      });\n\n    case CREATE_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return _objectSpread({}, state, {\n        processing: false,\n        error: \"\",\n        page: action.page\n      });\n\n    case CREATE_PAGE_FAILURE:\n      return _objectSpread({}, state, {\n        processing: false,\n        error: action.error,\n        page: null\n      });\n\n    case FETCH_PAGE_REQUEST:\n      return _objectSpread({}, state, {\n        processing: true,\n        error: \"\"\n      });\n\n    case FETCH_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return _objectSpread({}, state, {\n        processing: false,\n        error: \"\",\n        page: action.page\n      });\n\n    case FETCH_PAGE_FAILURE:\n      return _objectSpread({}, state, {\n        processing: false,\n        error: action.error,\n        page: null\n      });\n\n    case UPDATE_PAGE_REQUEST:\n      return _objectSpread({}, state, {\n        processing_update: true,\n        error: \"\"\n      });\n\n    case UPDATE_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return _objectSpread({}, state, {\n        processing_update: false,\n        error: \"\",\n        page: null\n      });\n\n    case UPDATE_PAGE_FAILURE:\n      return _objectSpread({}, state, {\n        processing_update: false,\n        error: action.error,\n        page: null\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/reducers/pages.js"],"names":["FETCH_ALLPAGES_REQUEST","FETCH_ALLPAGES_SUCCESS","FETCH_ALLPAGES_FAILURE","CREATE_PAGE_REQUEST","CREATE_PAGE_SUCCESS","CREATE_PAGE_FAILURE","FETCH_PAGE_REQUEST","FETCH_PAGE_SUCCESS","FETCH_PAGE_FAILURE","UPDATE_PAGE_REQUEST","UPDATE_PAGE_SUCCESS","UPDATE_PAGE_FAILURE","initialState","pages","processing","error","page","processing_update","state","action","type"],"mappings":";;;;;;AAAA,SACEA,sBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,kBAPF,EAQEC,kBARF,EASEC,kBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,QAaO,kBAbP;AAeA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,KAAK,EAAE,EAHY;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,iBAAiB,EAAE;AALA,CAArB;AAQA,eAAe,SAASJ,KAAT,GAA6C;AAAA,MAA9BK,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKpB,sBAAL;AACE,+BACKkB,KADL;AAEEJ,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKd,sBAAL;AACE;AACA,+BACKiB,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAE,EAHT;AAIEF,QAAAA,KAAK,EAAEM,MAAM,CAACN;AAJhB;;AAMF,SAAKX,sBAAL;AACE,+BACKgB,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAHhB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAMF,SAAKV,mBAAL;AACE,+BACKe,KADL;AAEEJ,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKX,mBAAL;AACE;AACA,+BACKc,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAE,EAHT;AAIEC,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAJf;;AAMF,SAAKX,mBAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAHhB;AAIEC,QAAAA,IAAI,EAAE;AAJR;;AAMF,SAAKV,kBAAL;AACE,+BACKY,KADL;AAEEJ,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKR,kBAAL;AACE;AACA,+BACKW,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAE,EAHT;AAIEC,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAJf;;AAMF,SAAKR,kBAAL;AACE,+BACKU,KADL;AAEEJ,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAHhB;AAIEC,QAAAA,IAAI,EAAE;AAJR;;AAMF,SAAKP,mBAAL;AACE,+BACKS,KADL;AAEED,QAAAA,iBAAiB,EAAE,IAFrB;AAGEF,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKL,mBAAL;AACE;AACA,+BACKQ,KADL;AAEED,QAAAA,iBAAiB,EAAE,KAFrB;AAGEF,QAAAA,KAAK,EAAE,EAHT;AAIEC,QAAAA,IAAI,EAAE;AAJR;;AAMF,SAAKL,mBAAL;AACE,+BACKO,KADL;AAEED,QAAAA,iBAAiB,EAAE,KAFrB;AAGEF,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAHhB;AAIEC,QAAAA,IAAI,EAAE;AAJR;;AAMF;AACE,aAAOE,KAAP;AAtFJ;AAwFD","sourcesContent":["import {\n  FETCH_ALLPAGES_REQUEST,\n  FETCH_ALLPAGES_SUCCESS,\n  FETCH_ALLPAGES_FAILURE,\n  CREATE_PAGE_REQUEST,\n  CREATE_PAGE_SUCCESS,\n  CREATE_PAGE_FAILURE,\n  FETCH_PAGE_REQUEST,\n  FETCH_PAGE_SUCCESS,\n  FETCH_PAGE_FAILURE,\n  UPDATE_PAGE_REQUEST,\n  UPDATE_PAGE_SUCCESS,\n  UPDATE_PAGE_FAILURE,\n} from \"../actions/pages\";\n\nconst initialState = {\n  pages: [],\n  processing: false,\n  error: \"\",\n  page: null,\n  processing_update: false\n};\n\nexport default function pages(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_ALLPAGES_REQUEST:\n      return {\n        ...state,\n        processing: true,\n        error: \"\"\n      };\n    case FETCH_ALLPAGES_SUCCESS:\n      // Parse out json and update the store\n      return {\n        ...state,\n        processing: false,\n        error: \"\",\n        pages: action.pages\n      };\n    case FETCH_ALLPAGES_FAILURE:\n      return {\n        ...state,\n        processing: false,\n        error: action.error,\n        pages: []\n      };\n    case CREATE_PAGE_REQUEST:\n      return {\n        ...state,\n        processing: true,\n        error: \"\"\n      };\n    case CREATE_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return {\n        ...state,\n        processing: false,\n        error: \"\",\n        page: action.page\n      };\n    case CREATE_PAGE_FAILURE:\n      return {\n        ...state,\n        processing: false,\n        error: action.error,\n        page: null\n      };\n    case FETCH_PAGE_REQUEST:\n      return {\n        ...state,\n        processing: true,\n        error: \"\"\n      };\n    case FETCH_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return {\n        ...state,\n        processing: false,\n        error: \"\",\n        page: action.page\n      };\n    case FETCH_PAGE_FAILURE:\n      return {\n        ...state,\n        processing: false,\n        error: action.error,\n        page: null\n      };\n    case UPDATE_PAGE_REQUEST:\n      return {\n        ...state,\n        processing_update: true,\n        error: \"\"\n      };\n    case UPDATE_PAGE_SUCCESS:\n      // Parse out json and update the store\n      return {\n        ...state,\n        processing_update: false,\n        error: \"\",\n        page: null\n      };\n    case UPDATE_PAGE_FAILURE:\n      return {\n        ...state,\n        processing_update: false,\n        error: action.error,\n        page: null\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}