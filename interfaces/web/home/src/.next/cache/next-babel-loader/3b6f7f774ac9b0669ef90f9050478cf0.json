{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport App from \"next/app\";\nimport React from \"react\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport flowRight from 'lodash/flowRight';\nimport { init } from \"@socialgouv/matomo-next\";\nimport sagas from \"../sagas\";\nimport allReducers from \"../reducers\";\nimport { verifyTokenRequest, verifyTokenRequestFailure } from \"../actions/auth\";\nimport '../styles.css';\nimport i18n from '../../i18n';\nvar withTranslation = i18n.withTranslation;\nvar sagaMiddleware = createSagaMiddleware();\nvar store;\n\nvar makeStore = function makeStore(initialState) {\n  store = createStore(allReducers, initialState, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(sagas);\n  return store;\n};\n\nvar Simpatico = /*#__PURE__*/function (_App) {\n  _inherits(Simpatico, _App);\n\n  var _super = _createSuper(Simpatico);\n\n  function Simpatico() {\n    _classCallCheck(this, Simpatico);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Simpatico, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      init({\n        url: 'http://localhost',\n        siteId: 2\n      }); // Not on the URL so check the localStorage\n\n      if (localStorage.getItem(\"token\")) {\n        // Ask server to verify and set cookie\n        store.dispatch(verifyTokenRequest({\n          token: localStorage.getItem(\"token\"),\n          role: \"participant\"\n        }));\n      } else {\n        // No token, set to false rather than unknown\n        store.dispatch(verifyTokenRequestFailure('no valid token'));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      return /*#__PURE__*/React.createElement(Provider, {\n        store: store\n      }, /*#__PURE__*/React.createElement(Component, pageProps));\n    }\n  }]);\n\n  return Simpatico;\n}(App);\n\nSimpatico.getInitialProps = async function (ctx) {\n  if (ctx.req) {\n    // Do a check if this debate exists before trying to render (no saga here, server side)\n    var res = await fetch(\"\".concat(config.api.host, \"/v1/fetchDebate?name=\").concat(ctx.req.headers.host));\n    var debateServer = await res.json();\n    console.log('debateServer', debateServer);\n    return {\n      debateServer: debateServer\n    };\n  }\n\n  return {\n    debateServer: null\n  };\n};\n\nvar appWithTranslation = i18n.appWithTranslation;\nexport default flowRight(withRedux(makeStore), appWithTranslation, withTranslation([\"common\"]))(Simpatico);","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/pages/_app.jsx"],"names":["App","React","applyMiddleware","createStore","Provider","withRedux","createSagaMiddleware","flowRight","init","sagas","allReducers","verifyTokenRequest","verifyTokenRequestFailure","i18n","withTranslation","sagaMiddleware","store","makeStore","initialState","run","Simpatico","url","siteId","localStorage","getItem","dispatch","token","role","props","Component","pageProps","getInitialProps","ctx","req","res","fetch","config","api","host","headers","debateServer","json","console","log","appWithTranslation"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,IAAT,QAAqB,yBAArB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,kBAAT,EAA6BC,yBAA7B,QAA8D,iBAA9D;AACA,OAAO,eAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;IAEQC,e,GAAoBD,I,CAApBC,e;AAER,IAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AAEA,IAAIU,KAAJ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,YAAY,EAAI;AAChCF,EAAAA,KAAK,GAAGb,WAAW,CACjBO,WADiB,EAEjBQ,YAFiB,EAGjBhB,eAAe,CAACa,cAAD,CAHE,CAAnB;AAKAA,EAAAA,cAAc,CAACI,GAAf,CAAmBV,KAAnB;AAEA,SAAOO,KAAP;AACD,CATD;;IAWMI,S;;;;;;;;;;;;;wCACgB;AAClBZ,MAAAA,IAAI,CAAC;AAAEa,QAAAA,GAAG,EAAE,kBAAP;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAJ,CADkB,CAGlB;;AACA,UAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjC;AACAR,QAAAA,KAAK,CAACS,QAAN,CACEd,kBAAkB,CAAC;AACjBe,UAAAA,KAAK,EAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AAEjBG,UAAAA,IAAI,EAAE;AAFW,SAAD,CADpB;AAMD,OARD,MAQO;AACL;AACAX,QAAAA,KAAK,CAACS,QAAN,CACEb,yBAAyB,CAAC,gBAAD,CAD3B;AAGD;AACF;;;6BAEQ;AAAA,wBAC0B,KAAKgB,KAD/B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAGP,0BACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEd;AAAjB,sBACE,oBAAC,SAAD,EAAec,SAAf,CADF,CADF;AAKD;;;;EA7BqB9B,G;;AAgCxBoB,SAAS,CAACW,eAAV,GAA4B,gBAAMC,GAAN,EAAa;AACvC,MAAIA,GAAG,CAACC,GAAR,EAAa;AACX;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,WAAIC,MAAM,CAACC,GAAP,CAAWC,IAAf,kCAA2CN,GAAG,CAACC,GAAJ,CAAQM,OAAR,CAAgBD,IAA3D,EAAvB;AACA,QAAME,YAAY,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAA3B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACA,WAAO;AACLA,MAAAA,YAAY,EAAZA;AADK,KAAP;AAGD;;AAED,SAAO;AACLA,IAAAA,YAAY,EAAE;AADT,GAAP;AAGD,CAfD;;IAiBQI,kB,GAAuB/B,I,CAAvB+B,kB;AAER,eAAerC,SAAS,CACtBF,SAAS,CAACY,SAAD,CADa,EAEtB2B,kBAFsB,EAGtB9B,eAAe,CAAC,UAAD,CAHO,CAAT,CAIbM,SAJa,CAAf","sourcesContent":["import App from \"next/app\";\nimport React from \"react\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport flowRight from 'lodash/flowRight';\nimport { init } from \"@socialgouv/matomo-next\";\n\nimport sagas from \"../sagas\";\nimport allReducers from \"../reducers\";\nimport { verifyTokenRequest, verifyTokenRequestFailure } from \"../actions/auth\";\nimport '../styles.css'\nimport i18n from '../../i18n';\n\nconst { withTranslation } = i18n;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nlet store;\n\nconst makeStore = initialState => {\n  store = createStore(\n    allReducers,\n    initialState,\n    applyMiddleware(sagaMiddleware)\n  );\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n\nclass Simpatico extends App {\n  componentDidMount() {\n    init({ url: 'http://localhost', siteId: 2 });\n\n    // Not on the URL so check the localStorage\n    if (localStorage.getItem(\"token\")) {\n      // Ask server to verify and set cookie\n      store.dispatch(\n        verifyTokenRequest({\n          token: localStorage.getItem(\"token\"),\n          role: \"participant\"\n        })\n      );\n    } else {\n      // No token, set to false rather than unknown\n      store.dispatch(\n        verifyTokenRequestFailure('no valid token')\n      );\n    }\n  }\n\n  render() {\n    const { Component, pageProps } = this.props;\n\n    return (\n      <Provider store={store}>\n        <Component {...pageProps} />\n      </Provider>\n    );\n  }\n}\n\nSimpatico.getInitialProps = async ctx => {\n  if (ctx.req) {\n    // Do a check if this debate exists before trying to render (no saga here, server side)\n    const res = await fetch(`${config.api.host}/v1/fetchDebate?name=${ctx.req.headers.host}`)\n    const debateServer = await res.json()\n\n    console.log('debateServer', debateServer)\n    return {\n      debateServer\n    };\n  }\n\n  return {\n    debateServer: null\n  }\n}\n\nconst { appWithTranslation } = i18n;\n\nexport default flowRight(\n  withRedux(makeStore),\n  appWithTranslation,\n  withTranslation([`common`])\n)(Simpatico);"]},"metadata":{},"sourceType":"module"}