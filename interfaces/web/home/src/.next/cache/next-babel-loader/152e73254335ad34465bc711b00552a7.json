{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport Head from 'next/head';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport Overview from \"../components/Overview\";\nimport Theme from \"../components/Theme\";\nimport Main from \"../components/Main\";\nimport Sidebar from \"../components/Sidebar\";\nimport Footer from \"../components/Footer\";\nimport nextI18NextInstance from '../../i18n';\nimport config from '../../config';\nimport { fetchDebateRequest } from '../actions/debate';\nimport { fetchPostsRequest } from '../actions/posts';\n\nvar getCurrentLang = function getCurrentLang() {\n  return nextI18NextInstance.i18n.language || 'en';\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    mainGrid: {\n      marginTop: theme.spacing(3)\n    }\n  };\n});\nexport default function Home(props) {\n  var dispatch = useDispatch();\n  var debate = useSelector(function (state) {\n    return state.debate.debate;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.posts;\n  }),\n      posts = _useSelector.posts;\n\n  var isValidToken = useSelector(function (state) {\n    return state.auth.isValidToken;\n  });\n  useEffect(function () {\n    // Fire once, get page and debate\n    if (!debate) {\n      dispatch(fetchDebateRequest(window.location.hostname));\n    }\n\n    if (posts.length === 0) {\n      dispatch(fetchPostsRequest(localStorage.getItem(\"accountId\")));\n    }\n  }, []);\n  useEffect(function () {\n    // Fire once, get page and debate\n    if (debate && debate.debateType === 'private') {\n      if (!isValidToken) {\n        window.location.href = '/login/';\n      }\n    }\n  }, [isValidToken]);\n  var classes = useStyles();\n\n  if (!debate) {\n    return React.createElement(\"div\", null);\n  }\n\n  return React.createElement(\"div\", null, React.createElement(Head, null, React.createElement(\"title\", null, debate.slug), React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\"\n  })), debate ? React.createElement(React.Fragment, null, React.createElement(CssBaseline, null), React.createElement(Container, {\n    maxWidth: \"lg\"\n  }, React.createElement(Header, {\n    selected: \"home\",\n    title: debate.slug,\n    header: debate.header\n  }), React.createElement(\"main\", null, React.createElement(Overview, {\n    data: debate.overview\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 4\n  }, debate.themes.map(function (theme) {\n    return React.createElement(Theme, {\n      key: theme.title[getCurrentLang()],\n      theme: theme\n    });\n  })), React.createElement(Grid, {\n    container: true,\n    spacing: 5,\n    className: classes.mainGrid\n  }, React.createElement(Main, {\n    title: \"Latest contributon\",\n    posts: posts\n  }), React.createElement(Sidebar, {\n    description: debate.sidebar.about[getCurrentLang()],\n    social: debate.sidebar.social\n  })))), React.createElement(Footer, {\n    title: \"Footer\",\n    description: \"Something here to give the footer a purpose!\"\n  })) : null);\n}\n\nHome.getInitialProps = async function (ctx) {\n  if (ctx.req) {\n    // Do a check if this debatee exists before trying to render (no saga here, server side)\n    var res = await fetch(\"\".concat(config.api.host, \"/v1/fetchDebate?name=\").concat(ctx.req.headers.host));\n    var debate = await res.json();\n    return debate;\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/pages/index.jsx"],"names":["React","useEffect","Head","makeStyles","CssBaseline","Grid","Container","GitHubIcon","FacebookIcon","TwitterIcon","useDispatch","useSelector","Header","Overview","Theme","Main","Sidebar","Footer","nextI18NextInstance","config","fetchDebateRequest","fetchPostsRequest","getCurrentLang","i18n","language","useStyles","theme","mainGrid","marginTop","spacing","Home","props","dispatch","debate","state","posts","isValidToken","auth","window","location","hostname","length","localStorage","getItem","debateType","href","classes","slug","header","overview","themes","map","title","sidebar","about","social","getInitialProps","ctx","req","res","fetch","api","host","headers","json"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Head from 'next/head'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\nimport Header from \"../components/Header\";\nimport Overview from \"../components/Overview\";\nimport Theme from \"../components/Theme\";\nimport Main from \"../components/Main\";\nimport Sidebar from \"../components/Sidebar\";\nimport Footer from \"../components/Footer\";\nimport nextI18NextInstance from '../../i18n';\nimport config from '../../config';\n\nimport { fetchDebateRequest } from '../actions/debate';\nimport { fetchPostsRequest } from '../actions/posts';\n\nconst getCurrentLang = () => nextI18NextInstance.i18n.language || 'en';\n\nconst useStyles = makeStyles(theme => ({\n  mainGrid: {\n    marginTop: theme.spacing(3)\n  },\n}));\n\nexport default function Home(props) {\n\n  const dispatch = useDispatch();\n\n  const debate = useSelector(state => state.debate.debate);\n  const { posts } = useSelector(state => state.posts);\n  const isValidToken = useSelector(state => state.auth.isValidToken);\n\n  useEffect(() => { // Fire once, get page and debate\n    if (!debate) {\n      dispatch(fetchDebateRequest(window.location.hostname));\n    }\n    if (posts.length === 0) {\n      dispatch(fetchPostsRequest(localStorage.getItem(\"accountId\")));\n    }\n  }, []);\n\n  useEffect(() => { // Fire once, get page and debate\n    if (debate && debate.debateType === 'private') {\n      if (!isValidToken) {\n        window.location.href = '/login/';\n      }\n    }\n  }, [isValidToken]);\n\n  const classes = useStyles();\n\n  if (!debate) {\n    return (<div/>)\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>{debate.slug}</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      {debate ? (\n      <>\n        <CssBaseline />\n        <Container maxWidth=\"lg\">\n          <Header selected='home' title={debate.slug} header={debate.header} />\n          <main>\n            <Overview data={debate.overview} />\n            <Grid container spacing={4}>\n              {debate.themes.map(theme => (\n                <Theme key={theme.title[getCurrentLang()]} theme={theme} />\n              ))}\n            </Grid>\n            <Grid container spacing={5} className={classes.mainGrid}>\n              <Main title=\"Latest contributon\" posts={posts} />\n              <Sidebar\n                description={debate.sidebar.about[getCurrentLang()]}\n                social={debate.sidebar.social}\n              />\n            </Grid>\n          </main>\n        </Container>\n        <Footer title=\"Footer\" description=\"Something here to give the footer a purpose!\" />\n      </>) : null }\n     </div>\n  );\n}\n\nHome.getInitialProps = async ctx => {\n  if (ctx.req) {\n    // Do a check if this debatee exists before trying to render (no saga here, server side)\n    const res = await fetch(`${config.api.host}/v1/fetchDebate?name=${ctx.req.headers.host}`)\n    const debate = await res.json()\n\n    return debate\n  }\n\n  return  null\n}"]},"metadata":{},"sourceType":"module"}