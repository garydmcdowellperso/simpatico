{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { FETCH_ALLDEBATES_REQUEST, fetchDebatesSuccess, fetchDebatesFailure, CREATE_DEBATE_REQUEST, createDebateSuccess, createDebateFailure, FETCH_DEBATE_REQUEST, fetchDebateSuccess, fetchDebateFailure, UPDATE_LANDING_PAGE_HEADER_REQUEST, updateLandingPageHeaderSuccess, updateLandingPageHeaderFailure, UPDATE_LANDING_PAGE_OVERVIEW_REQUEST, updateLandingPageOverviewSuccess, updateLandingPageOverviewFailure, UPDATE_LANDING_PAGE_THEMES_REQUEST, updateLandingPageThemesSuccess, updateLandingPageThemesFailure } from \"../actions/debate\";\nimport { get, post, putApi } from \"../lib/api\";\n\nfunction* fetchAllDebates() {\n  var r = yield get(\"v1/fetchAllDebates\").then(function (json) {\n    return put(fetchDebatesSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchDebatesFailure(err));\n  });\n  yield r;\n}\n\nfunction* fetchDebate(action) {\n  var r = yield get(\"v1/fetchDebate?name=\".concat(action.name)).then(function (json) {\n    return put(fetchDebateSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchDebateFailure(err));\n  });\n  yield r;\n}\n\nfunction* createDebate(action) {\n  var r = yield post(\"v1/createDebate\", JSON.stringify({\n    name: action.name,\n    slug: action.slug,\n    debateType: action.debateType,\n    languages: action.languages\n  })).then(function (json) {\n    return put(createDebateSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(createDebateFailure(err));\n  });\n  yield r;\n}\n\nfunction* updateLandingPageHeader(action) {\n  var r = yield putApi(\"v1/updateLandingPageHeader\", JSON.stringify({\n    debateID: action.debateID,\n    header: action.header\n  })).then(function (json) {\n    return put(updateLandingPageHeaderSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(updateLandingPageHeaderFailure(err));\n  });\n  yield r;\n}\n\nfunction* updateLandingPageOverview(action) {\n  var r = yield putApi(\"v1/updateLandingPageOverview\", JSON.stringify({\n    debateID: action.debateID,\n    overview: action.overview\n  })).then(function (json) {\n    return put(updateLandingPageOverviewSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(updateLandingPageOverviewFailure(err));\n  });\n  yield r;\n}\n\nfunction* updateLandingPageThemes(action) {\n  var r = yield putApi(\"v1/updateLandingPageThemes\", JSON.stringify({\n    debateID: action.debateID,\n    themes: action.themes\n  })).then(function (json) {\n    return put(updateLandingPageThemesSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(updateLandingPageThemesFailure(err));\n  });\n  yield r;\n}\n\nexport default function* authSaga() {\n  yield takeLatest(FETCH_DEBATE_REQUEST, fetchDebate);\n  yield takeLatest(FETCH_ALLDEBATES_REQUEST, fetchAllDebates);\n  yield takeLatest(CREATE_DEBATE_REQUEST, createDebate);\n  yield takeLatest(UPDATE_LANDING_PAGE_HEADER_REQUEST, updateLandingPageHeader);\n  yield takeLatest(UPDATE_LANDING_PAGE_OVERVIEW_REQUEST, updateLandingPageOverview);\n  yield takeLatest(UPDATE_LANDING_PAGE_THEMES_REQUEST, updateLandingPageThemes);\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/sagas/debate.js"],"names":["takeLatest","put","FETCH_ALLDEBATES_REQUEST","fetchDebatesSuccess","fetchDebatesFailure","CREATE_DEBATE_REQUEST","createDebateSuccess","createDebateFailure","FETCH_DEBATE_REQUEST","fetchDebateSuccess","fetchDebateFailure","UPDATE_LANDING_PAGE_HEADER_REQUEST","updateLandingPageHeaderSuccess","updateLandingPageHeaderFailure","UPDATE_LANDING_PAGE_OVERVIEW_REQUEST","updateLandingPageOverviewSuccess","updateLandingPageOverviewFailure","UPDATE_LANDING_PAGE_THEMES_REQUEST","updateLandingPageThemesSuccess","updateLandingPageThemesFailure","get","post","putApi","fetchAllDebates","r","then","json","err","fetchDebate","action","name","createDebate","JSON","stringify","slug","debateType","languages","updateLandingPageHeader","debateID","header","updateLandingPageOverview","overview","updateLandingPageThemes","themes","authSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport {\n  FETCH_ALLDEBATES_REQUEST,\n  fetchDebatesSuccess,\n  fetchDebatesFailure,\n  CREATE_DEBATE_REQUEST,\n  createDebateSuccess,\n  createDebateFailure,\n  FETCH_DEBATE_REQUEST,\n  fetchDebateSuccess,\n  fetchDebateFailure,\n  UPDATE_LANDING_PAGE_HEADER_REQUEST,\n  updateLandingPageHeaderSuccess,\n  updateLandingPageHeaderFailure,\n  UPDATE_LANDING_PAGE_OVERVIEW_REQUEST,\n  updateLandingPageOverviewSuccess,\n  updateLandingPageOverviewFailure,\n  UPDATE_LANDING_PAGE_THEMES_REQUEST,\n  updateLandingPageThemesSuccess,\n  updateLandingPageThemesFailure\n} from \"../actions/debate\";\nimport { get, post, putApi } from \"../lib/api\";\n\nfunction* fetchAllDebates() {\n  const r = yield get(\"v1/fetchAllDebates\")\n    .then(json => put(fetchDebatesSuccess(json)))\n    .catch(err => put(fetchDebatesFailure(err)));\n  yield r;\n}\n\nfunction* fetchDebate(action) {\n  const r = yield get(`v1/fetchDebate?name=${action.name}`)\n    .then(json => put(fetchDebateSuccess(json)))\n    .catch(err => put(fetchDebateFailure(err)));\n  yield r;\n}\n\nfunction* createDebate(action) {\n  const r = yield post(\"v1/createDebate\",\n    JSON.stringify({\n      name: action.name,\n      slug: action.slug,\n      debateType: action.debateType,\n      languages: action.languages\n    }))\n    .then(json => put(createDebateSuccess(json)))\n    .catch(err => put(createDebateFailure(err)));\n  yield r;\n}\n\nfunction* updateLandingPageHeader(action) {\n  const r = yield putApi(\"v1/updateLandingPageHeader\",\n    JSON.stringify({\n      debateID: action.debateID,\n      header: action.header\n    }))\n    .then(json => put(updateLandingPageHeaderSuccess(json)))\n    .catch(err => put(updateLandingPageHeaderFailure(err)));\n  yield r;\n}\n\nfunction* updateLandingPageOverview(action) {\n  const r = yield putApi(\"v1/updateLandingPageOverview\",\n    JSON.stringify({\n      debateID: action.debateID,\n      overview: action.overview\n    }))\n    .then(json => put(updateLandingPageOverviewSuccess(json)))\n    .catch(err => put(updateLandingPageOverviewFailure(err)));\n  yield r;\n}\n\nfunction* updateLandingPageThemes(action) {\n  const r = yield putApi(\"v1/updateLandingPageThemes\",\n    JSON.stringify({\n      debateID: action.debateID,\n      themes: action.themes\n    }))\n    .then(json => put(updateLandingPageThemesSuccess(json)))\n    .catch(err => put(updateLandingPageThemesFailure(err)));\n  yield r;\n}\n\nexport default function* authSaga() {\n  yield takeLatest(FETCH_DEBATE_REQUEST, fetchDebate);\n  yield takeLatest(FETCH_ALLDEBATES_REQUEST, fetchAllDebates);\n  yield takeLatest(CREATE_DEBATE_REQUEST, createDebate);\n  yield takeLatest(UPDATE_LANDING_PAGE_HEADER_REQUEST, updateLandingPageHeader);\n  yield takeLatest(UPDATE_LANDING_PAGE_OVERVIEW_REQUEST, updateLandingPageOverview);\n  yield takeLatest(UPDATE_LANDING_PAGE_THEMES_REQUEST, updateLandingPageThemes);\n}\n"]},"metadata":{},"sourceType":"module"}