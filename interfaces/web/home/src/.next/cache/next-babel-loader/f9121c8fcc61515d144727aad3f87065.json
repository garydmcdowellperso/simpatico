{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { cloneDeep } from \"lodash\";\nimport { CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, REPLY_POST_REQUEST, REPLY_POST_SUCCESS, REPLY_POST_FAILURE, FETCH_POSTS_FOR_THREAD_REQUEST, FETCH_POSTS_FOR_THREAD_SUCCESS, FETCH_POSTS_FOR_THREAD_FAILURE } from \"../actions/post\";\nvar initialState = {\n  error: \"\",\n  processing: false,\n  posts: []\n};\n\nfunction findInReplies(replies, actionPost) {\n  replies.map(function (y) {\n    if (y.id === actionPost.id) {\n      return y.replies = actionPost.replies;\n    }\n\n    if (y.replies && y.replies.length > 0) {\n      findInReplies(y.replies, actionPost);\n    }\n  });\n}\n\nexport default function post() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newPosts;\n\n  switch (action.type) {\n    case CREATE_POST_SUCCESS:\n      newPosts = cloneDeep(state.posts);\n      newPosts.push(action.post);\n      return _objectSpread({}, state, {\n        posts: newPosts\n      });\n\n    case REPLY_POST_SUCCESS:\n      // Replace existing post with returned one\n      newPosts = cloneDeep(state.posts);\n      newPosts.map(function (x) {\n        if (x.id === action.post.id) {\n          return x.replies = action.post.replies;\n        }\n\n        if (x.replies && x.replies.length > 0) {\n          findInReplies(x.replies, action.post);\n        }\n      });\n      return _objectSpread({}, state, {\n        posts: newPosts\n      });\n\n    case FETCH_POSTS_FOR_THREAD_REQUEST:\n      return _objectSpread({}, state, {\n        processing: true,\n        posts: []\n      });\n\n    case FETCH_POSTS_FOR_THREAD_SUCCESS:\n      return _objectSpread({}, state, {\n        processing: false,\n        posts: action.posts\n      });\n\n    case FETCH_POSTS_FOR_THREAD_FAILURE:\n      return _objectSpread({}, state, {\n        processing: false,\n        posts: [],\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/reducers/post.js"],"names":["cloneDeep","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","REPLY_POST_REQUEST","REPLY_POST_SUCCESS","REPLY_POST_FAILURE","FETCH_POSTS_FOR_THREAD_REQUEST","FETCH_POSTS_FOR_THREAD_SUCCESS","FETCH_POSTS_FOR_THREAD_FAILURE","initialState","error","processing","posts","findInReplies","replies","actionPost","map","y","id","length","post","state","action","newPosts","type","push","x"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,8BAPF,EAQEC,8BARF,EASEC,8BATF,QAUO,iBAVP;AAYA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,UAAU,EAAE,KAAzB;AAAgCC,EAAAA,KAAK,EAAE;AAAvC,CAArB;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,UAAhC,EAA4C;AAC1CD,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAAC,CAAC,EAAI;AACf,QAAIA,CAAC,CAACC,EAAF,KAASH,UAAU,CAACG,EAAxB,EAA4B;AAC1B,aAAQD,CAAC,CAACH,OAAF,GAAYC,UAAU,CAACD,OAA/B;AACD;;AACD,QAAIG,CAAC,CAACH,OAAF,IAAaG,CAAC,CAACH,OAAF,CAAUK,MAAV,GAAmB,CAApC,EAAuC;AACrCN,MAAAA,aAAa,CAACI,CAAC,CAACH,OAAH,EAAYC,UAAZ,CAAb;AACD;AACF,GAPD;AAQD;;AAED,eAAe,SAASK,IAAT,GAA4C;AAAA,MAA9BC,KAA8B,uEAAtBZ,YAAsB;AAAA,MAARa,MAAQ;AACzD,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKvB,mBAAL;AACEsB,MAAAA,QAAQ,GAAGxB,SAAS,CAACsB,KAAK,CAACT,KAAP,CAApB;AACAW,MAAAA,QAAQ,CAACE,IAAT,CAAcH,MAAM,CAACF,IAArB;AAEA,+BACKC,KADL;AAEET,QAAAA,KAAK,EAAEW;AAFT;;AAIF,SAAKnB,kBAAL;AACE;AACAmB,MAAAA,QAAQ,GAAGxB,SAAS,CAACsB,KAAK,CAACT,KAAP,CAApB;AACAW,MAAAA,QAAQ,CAACP,GAAT,CAAa,UAAAU,CAAC,EAAI;AAChB,YAAIA,CAAC,CAACR,EAAF,KAASI,MAAM,CAACF,IAAP,CAAYF,EAAzB,EAA6B;AAC3B,iBAAQQ,CAAC,CAACZ,OAAF,GAAYQ,MAAM,CAACF,IAAP,CAAYN,OAAhC;AACD;;AACD,YAAIY,CAAC,CAACZ,OAAF,IAAaY,CAAC,CAACZ,OAAF,CAAUK,MAAV,GAAmB,CAApC,EAAuC;AACrCN,UAAAA,aAAa,CAACa,CAAC,CAACZ,OAAH,EAAYQ,MAAM,CAACF,IAAnB,CAAb;AACD;AACF,OAPD;AASA,+BACKC,KADL;AAEET,QAAAA,KAAK,EAAEW;AAFT;;AAIF,SAAKjB,8BAAL;AACE,+BACKe,KADL;AAEEV,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKL,8BAAL;AACE,+BACKc,KADL;AAEEV,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAEU,MAAM,CAACV;AAHhB;;AAKF,SAAKJ,8BAAL;AACE,+BACKa,KADL;AAEEV,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,KAAK,EAAE,EAHT;AAIEF,QAAAA,KAAK,EAAEY,MAAM,CAACZ;AAJhB;;AAMF;AACE,aAAOW,KAAP;AA7CJ;AA+CD","sourcesContent":["import { cloneDeep } from \"lodash\";\n\nimport {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  REPLY_POST_REQUEST,\n  REPLY_POST_SUCCESS,\n  REPLY_POST_FAILURE,\n  FETCH_POSTS_FOR_THREAD_REQUEST,\n  FETCH_POSTS_FOR_THREAD_SUCCESS,\n  FETCH_POSTS_FOR_THREAD_FAILURE\n} from \"../actions/post\";\n\nconst initialState = { error: \"\", processing: false, posts: [] };\n\nfunction findInReplies(replies, actionPost) {\n  replies.map(y => {\n    if (y.id === actionPost.id) {\n      return (y.replies = actionPost.replies);\n    }\n    if (y.replies && y.replies.length > 0) {\n      findInReplies(y.replies, actionPost);\n    }\n  });\n}\n\nexport default function post(state = initialState, action) {\n  let newPosts;\n  switch (action.type) {\n    case CREATE_POST_SUCCESS:\n      newPosts = cloneDeep(state.posts);\n      newPosts.push(action.post);\n\n      return {\n        ...state,\n        posts: newPosts\n      };\n    case REPLY_POST_SUCCESS:\n      // Replace existing post with returned one\n      newPosts = cloneDeep(state.posts);\n      newPosts.map(x => {\n        if (x.id === action.post.id) {\n          return (x.replies = action.post.replies);\n        }\n        if (x.replies && x.replies.length > 0) {\n          findInReplies(x.replies, action.post);\n        }\n      });\n\n      return {\n        ...state,\n        posts: newPosts\n      };\n    case FETCH_POSTS_FOR_THREAD_REQUEST:\n      return {\n        ...state,\n        processing: true,\n        posts: []\n      };\n    case FETCH_POSTS_FOR_THREAD_SUCCESS:\n      return {\n        ...state,\n        processing: false,\n        posts: action.posts\n      };\n    case FETCH_POSTS_FOR_THREAD_FAILURE:\n      return {\n        ...state,\n        processing: false,\n        posts: [],\n        error: action.error\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}