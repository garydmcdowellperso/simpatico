{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { FETCH_ALLPAGES_REQUEST, fetchAllPagesSuccess, fetchAllPagesFailure, CREATE_PAGE_REQUEST, createPageSuccess, createPageFailure, FETCH_PAGE_REQUEST, fetchPageSuccess, fetchPageFailure, UPDATE_PAGE_REQUEST, updatePageSuccess, updatePageFailure } from \"../actions/pages\";\nimport { get, post, putApi } from \"../lib/api\";\n\nfunction* fetchAllPages(action) {\n  var r = yield get(\"v1/fetchAllPages\").then(function (json) {\n    return put(fetchAllPagesSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchAllPagesFailure(err));\n  });\n  yield r;\n}\n\nfunction* createPage(action) {\n  var r = yield post(\"v1/createPage\", JSON.stringify({\n    name: action.name,\n    type: action.pageType,\n    debateId: action.debateId,\n    url: action.url,\n    languages: action.languages\n  })).then(function (json) {\n    return put(createPageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(createPageFailure(err));\n  });\n  yield r;\n}\n\nfunction* fetchPage(action) {\n  var r = yield get(\"v1/fetchPage?id=\".concat(action.id)).then(function (json) {\n    return put(fetchPageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchPageFailure(err));\n  });\n  yield r;\n}\n\nfunction* updatePage(action) {\n  var r = yield putApi(\"v1/updatePage\", JSON.stringify({\n    name: action.name,\n    type: action.pageType,\n    id: action.id,\n    url: action.url,\n    languages: action.languages\n  })).then(function (json) {\n    return put(updatePageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(updatePageFailure(err));\n  });\n  yield r;\n}\n\nexport default function* pagesSaga() {\n  yield takeLatest(FETCH_ALLPAGES_REQUEST, fetchAllPages);\n  yield takeLatest(CREATE_PAGE_REQUEST, createPage);\n  yield takeLatest(FETCH_PAGE_REQUEST, fetchPage);\n  yield takeLatest(UPDATE_PAGE_REQUEST, updatePage);\n}","map":null,"metadata":{},"sourceType":"module"}