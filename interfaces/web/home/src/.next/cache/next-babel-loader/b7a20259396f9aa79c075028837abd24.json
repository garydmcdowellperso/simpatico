{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport flowRight from 'lodash/flowRight';\nimport nextI18NextInstance from '../../i18n';\nimport UserMenu from \"./UserMenu\";\nimport Share from \"./Share\";\nimport { fetchUserInfo } from \"../actions/auth\";\nvar withTranslation = nextI18NextInstance.withTranslation;\n\nvar getCurrentLang = function getCurrentLang() {\n  return nextI18NextInstance.i18n.language || 'en';\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    toolbar: {\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    },\n    toolbarTitle: {\n      flex: 1\n    },\n    toolbarSecondary: {\n      justifyContent: \"space-around\",\n      width: \"80%\",\n      overflowX: \"auto\"\n    },\n    toolbarLink: {\n      padding: theme.spacing(1),\n      flexShrink: 0\n    },\n    linkSelected: {\n      textDecoration: 'none',\n      cursor: 'pointer',\n      fontSize: '1rem',\n      fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n      fontWeight: 400,\n      lineHeight: '1.5',\n      letterSpacing: '0.00938em',\n      color: '#007bff'\n    },\n    link: {\n      textDecoration: 'none',\n      cursor: 'pointer',\n      fontSize: '1rem',\n      fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n      fontWeight: 400,\n      lineHeight: '1.5',\n      letterSpacing: '0.00938em'\n    }\n  };\n});\n\nfunction Header(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      shareOpen = _useState2[0],\n      setShareOpen = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      firstNameDisplay = _useState4[0],\n      setFirstNameDisplay = _useState4[1];\n\n  var classes = useStyles();\n  var header = props.header,\n      title = props.title,\n      selected = props.selected,\n      t = props.t;\n\n  function handleShareClose() {\n    setShareOpen(false);\n  }\n\n  var dispatch = useDispatch();\n  var firstNameLocalStorage;\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      firstName = _useSelector.firstName,\n      lastName = _useSelector.lastName,\n      id = _useSelector.id,\n      isValidToken = _useSelector.isValidToken,\n      token = _useSelector.token;\n\n  if (false) {\n    // Server side rendering protection\n    firstNameLocalStorage = localStorage.getItem(\"firstName\");\n  } // First time effect\n\n\n  useEffect(function () {\n    // Pull info from local storage if available\n    if (firstNameLocalStorage) {\n      setFirstNameDisplay(firstNameLocalStorage);\n    }\n  }, []); // First time effect and when isValidToken changes\n\n  useEffect(function () {\n    if (isValidToken) {\n      // So the token is present and valid, do I have the user details?\n      if (!firstNameLocalStorage) {\n        dispatch(fetchUserInfo());\n      }\n    } // Sorry token no longer valid, get rid of display name for login\n\n\n    if (isValidToken) {\n      if (firstNameLocalStorage) {\n        setFirstNameDisplay();\n      }\n    }\n\n    if (isValidToken) {\n      localStorage.setItem(\"token\", token);\n    }\n  }, [isValidToken]);\n  useEffect(function () {\n    // Set localstorage for other apps but also update our local state to force render\n    localStorage.setItem(\"firstName\", firstName);\n    localStorage.setItem(\"lastName\", lastName);\n    localStorage.setItem(\"uid\", id);\n    setFirstNameDisplay(firstName);\n  }, [firstName]);\n  return React.createElement(React.Fragment, null, React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, header.share ? React.createElement(React.Fragment, null, React.createElement(Button, {\n    onClick: function onClick() {\n      setShareOpen(true);\n    },\n    size: \"small\"\n  }, t('share')), React.createElement(Share, {\n    open: shareOpen,\n    handleClose: handleShareClose\n  }), React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h5\",\n    color: \"inherit\",\n    align: \"center\",\n    noWrap: true,\n    className: classes.toolbarTitle\n  }, title)) : null, React.createElement(IconButton, null, React.createElement(SearchIcon, null)), React.createElement(IconButton, null, React.createElement(NotificationsIcon, null)), !firstNameDisplay ? React.createElement(Button, {\n    variant: \"outlined\",\n    size: \"small\",\n    onClick: function onClick() {\n      window.location = \"/login/\";\n    }\n  }, t('signin')) : React.createElement(UserMenu, {\n    firstNameDisplay: firstNameDisplay\n  })), React.createElement(Toolbar, {\n    component: \"nav\",\n    variant: \"dense\",\n    className: classes.toolbarSecondary\n  }, React.createElement(Link, {\n    href: \"/\"\n  }, React.createElement(\"a\", {\n    className: selected === 'home' ? classes.linkSelected : classes.link\n  }, t('home'))), header.sections.map(function (section, idx) {\n    return React.createElement(Link, {\n      key: idx,\n      href: {\n        pathname: 'cmspage',\n        query: {\n          page: section.page,\n          title: section.languages[getCurrentLang()]\n        }\n      }\n    }, React.createElement(\"a\", {\n      className: selected === section.languages[getCurrentLang()] ? classes.linkSelected : classes.link\n    }, section.languages[getCurrentLang()]));\n  })));\n}\n\nHeader.propTypes = {\n  sections: PropTypes.array,\n  title: PropTypes.string\n};\nexport default flowRight(withTranslation(['common']))(Header);","map":null,"metadata":{},"sourceType":"module"}