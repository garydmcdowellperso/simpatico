{"ast":null,"code":"import { takeLatest, put } from \"redux-saga/effects\";\nimport { FETCH_ALLPAGES_REQUEST, fetchAllPagesSuccess, fetchAllPagesFailure, CREATE_PAGE_REQUEST, createPageSuccess, createPageFailure, FETCH_PAGE_REQUEST, fetchPageSuccess, fetchPageFailure, UPDATE_PAGE_REQUEST, updatePageSuccess, updatePageFailure } from \"../actions/pages\";\nimport { get, post, putApi } from \"../lib/api\";\n\nfunction* fetchAllPages(action) {\n  var r = yield get(\"v1/fetchAllPages\").then(function (json) {\n    return put(fetchAllPagesSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchAllPagesFailure(err));\n  });\n  yield r;\n}\n\nfunction* createPage(action) {\n  var r = yield post(\"v1/createPage\", JSON.stringify({\n    name: action.name,\n    type: action.pageType,\n    debateId: action.debateId,\n    url: action.url,\n    languages: action.languages\n  })).then(function (json) {\n    return put(createPageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(createPageFailure(err));\n  });\n  yield r;\n}\n\nfunction* fetchPage(action) {\n  var r = yield get(\"v1/fetchPage?id=\".concat(action.id)).then(function (json) {\n    return put(fetchPageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(fetchPageFailure(err));\n  });\n  yield r;\n}\n\nfunction* updatePage(action) {\n  var r = yield putApi(\"v1/updatePage\", JSON.stringify({\n    name: action.name,\n    type: action.pageType,\n    id: action.id,\n    url: action.url,\n    languages: action.languages\n  })).then(function (json) {\n    return put(updatePageSuccess(json));\n  })[\"catch\"](function (err) {\n    return put(updatePageFailure(err));\n  });\n  yield r;\n}\n\nexport default function* pagesSaga() {\n  yield takeLatest(FETCH_ALLPAGES_REQUEST, fetchAllPages);\n  yield takeLatest(CREATE_PAGE_REQUEST, createPage);\n  yield takeLatest(FETCH_PAGE_REQUEST, fetchPage);\n  yield takeLatest(UPDATE_PAGE_REQUEST, updatePage);\n}","map":{"version":3,"sources":["/Users/gary/dev/simpatico/interfaces/web/home/src/sagas/pages.js"],"names":["takeLatest","put","FETCH_ALLPAGES_REQUEST","fetchAllPagesSuccess","fetchAllPagesFailure","CREATE_PAGE_REQUEST","createPageSuccess","createPageFailure","FETCH_PAGE_REQUEST","fetchPageSuccess","fetchPageFailure","UPDATE_PAGE_REQUEST","updatePageSuccess","updatePageFailure","get","post","putApi","fetchAllPages","action","r","then","json","err","createPage","JSON","stringify","name","type","pageType","debateId","url","languages","fetchPage","id","updatePage","pagesSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\nimport {\n  FETCH_ALLPAGES_REQUEST,\n  fetchAllPagesSuccess,\n  fetchAllPagesFailure,\n  CREATE_PAGE_REQUEST,\n  createPageSuccess,\n  createPageFailure,\n  FETCH_PAGE_REQUEST,\n  fetchPageSuccess,\n  fetchPageFailure,\n  UPDATE_PAGE_REQUEST,\n  updatePageSuccess,\n  updatePageFailure,\n} from \"../actions/pages\";\nimport { get, post, putApi } from \"../lib/api\";\n\nfunction* fetchAllPages(action) {\n  const r = yield get(`v1/fetchAllPages`)\n    .then(json => put(fetchAllPagesSuccess(json)))\n    .catch(err => put(fetchAllPagesFailure(err)));\n  yield r;\n}\n\nfunction* createPage(action) {\n  const r = yield post(\"v1/createPage\",\n    JSON.stringify({\n      name: action.name,\n      type: action.pageType,\n      debateId: action.debateId,\n      url: action.url,\n      languages: action.languages\n    }))\n    .then(json => put(createPageSuccess(json)))\n    .catch(err => put(createPageFailure(err)));\n  yield r;\n}\n\nfunction* fetchPage(action) {\n  const r = yield get(`v1/fetchPage?id=${action.id}`)\n    .then(json => put(fetchPageSuccess(json)))\n    .catch(err => put(fetchPageFailure(err)));\n  yield r;\n}\n\nfunction* updatePage(action) {\n  const r = yield putApi(\"v1/updatePage\",\n    JSON.stringify({\n      name: action.name,\n      type: action.pageType,\n      id: action.id,\n      url: action.url,\n      languages: action.languages\n    }))\n    .then(json => put(updatePageSuccess(json)))\n    .catch(err => put(updatePageFailure(err)));\n  yield r;\n}\n\nexport default function* pagesSaga() {\n  yield takeLatest(FETCH_ALLPAGES_REQUEST, fetchAllPages);\n  yield takeLatest(CREATE_PAGE_REQUEST, createPage);\n  yield takeLatest(FETCH_PAGE_REQUEST, fetchPage);\n  yield takeLatest(UPDATE_PAGE_REQUEST, updatePage);\n}\n"]},"metadata":{},"sourceType":"module"}